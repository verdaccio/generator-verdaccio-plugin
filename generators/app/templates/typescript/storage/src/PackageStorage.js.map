{"version":3,"file":"PackageStorage.js","names":["StoragePluginManage","constructor","config","packageName","logger","updatePackage","name","updateHandler","onWrite","transformPackage","onEnd","deletePackage","fileName","callback","removePackage","createPackage","data","savePackage","pkgName","pkg","readPackage","writeTarball","readTarball"],"sources":["PackageStorage.ts"],"sourcesContent":["import {\n  Callback,\n  Logger,\n  ILocalPackageManager,\n  StorageUpdateCallback,\n  PackageTransformer,\n  StorageWriteCallback,\n  CallbackAction,\n  Package,\n  ReadPackageCallback,\n} from '@verdaccio/types';\nimport {UploadTarball, ReadTarball} from '@verdaccio/streams';\nimport {getNotFound, getConflict, getInternalError} from '@verdaccio/commons-api';\n\nimport {CustomConfig} from '../types/index';\nexport default class StoragePluginManage implements ILocalPackageManager {\n  public logger: Logger;\n  public packageName: string;\n  public config: CustomConfig;\n\n  public constructor(\n      config: CustomConfig,\n      packageName: string,\n      logger: Logger,\n  ) {\n    this.logger = logger;\n    this.packageName = packageName;\n    this.config = config;\n  }\n\n  /**\n   * Handle a metadata update and\n   * @param name\n   * @param updateHandler\n   * @param onWrite\n   * @param transformPackage\n   * @param onEnd\n   */\n  public updatePackage(\n      name: string,\n      updateHandler: StorageUpdateCallback,\n      onWrite: StorageWriteCallback,\n      transformPackage: PackageTransformer,\n      onEnd: CallbackAction,\n  ): void {\n    /**\n     * Example of implementation:\n      this.customStore.get().then((pkg: Package) => {\n        updateHandler(pkg, function onUpdateFinish(err) {\n          if (err) {\n            onEnd(err);\n          } else {\n            onWrite(name, pkg, onEnd);\n          }\n        })\n      });\n     */\n  }\n\n  /**\n   * Delete a specific file (tarball or package.json)\n   * @param fileName\n   * @param callback\n   */\n  public deletePackage(fileName: string, callback: CallbackAction): void {\n    /**\n     * Example of implementation:\n     this.customStore.delete(fileName,  (err) => {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null);\n        }\n      })\n     */\n  }\n\n  /**\n   * Delete a package (folder, path)\n   * This happens after all versions ar tarballs have been removed.\n   * @param callback\n   */\n  public removePackage(callback: CallbackAction): void {\n    /**\n     * Example of implementation:\n      this.customStore.removePackage((err) => {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null);\n        }\n      })\n     */\n  }\n\n  /**\n   * Publish a new package (version).\n   * @param name\n   * @param data\n   * @param callback\n   */\n  public createPackage(\n      name: string,\n      data: Package,\n      callback: CallbackAction,\n  ): void {\n    /**\n     * Example of implementation:\n     * this.customStore.create(name, data).then(err => {\n        if (err.notFound) {\n          callback(getNotFound());\n        } else if (err.alreadyExist) {\n          callback(getConflict());\n        } else {\n          callback(null);\n        }\n      })\n     */\n  }\n\n  /**\n   * Perform write anobject to the storage.\n   * Similar to updatePackage but without middleware handlers\n   * @param pkgName package name\n   * @param pkg package metadata\n   * @param callback\n   */\n  public savePackage(pkgName: string, pkg: Package, callback: CallbackAction): void {\n    /*\n      Example of implementation:\n      this.cumstomStore.write(pkgName, pkgName).then(data => {\n        callback(null);\n      }).catch(err => {\n        callback(getInternalError(err.message));\n      })\n    */\n  }\n\n  /**\n   * Read a package from storage\n   * @param pkgName package name\n   * @param callback\n   */\n  public readPackage(pkgName: string, callback: ReadPackageCallback): void {\n    /**\n     * Example of implementation:\n     * this.customStorage.read(name, (err, pkg: Package) => {\n          if (err.fooError) {\n            callback(getInternalError(err))\n          } else if (err.barError) {\n            callback(getNotFound());\n          } else {\n            callback(null, pkg)\n          }\n      });\n     */\n  }\n\n  /**\n   * Create writtable stream (write a tarball)\n   * @param name\n   */\n  public writeTarball(name: string): UploadTarball {\n    /**\n       * Example of implementation:\n       * const stream = new UploadTarball({});\n         return stream;\n       */\n\n  }\n\n  /**\n   * Create a readable stream (read a from a tarball)\n   * @param name\n   */\n  public readTarball(name: string): ReadTarball {\n    /**\n     * Example of implementation:\n     * const stream = new ReadTarball({});\n       return stream;\n     */\n  }\n}\n"],"mappings":";;;;;;;AAee,MAAMA,mBAAN,CAA0D;EAKhEC,WAAW,CACdC,MADc,EAEdC,WAFc,EAGdC,MAHc,EAIhB;IACA,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKD,WAAL,GAAmBA,WAAnB;IACA,KAAKD,MAAL,GAAcA,MAAd;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACSG,aAAa,CAChBC,IADgB,EAEhBC,aAFgB,EAGhBC,OAHgB,EAIhBC,gBAJgB,EAKhBC,KALgB,EAMZ;IACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG;EAED;AACF;AACA;AACA;AACA;;;EACSC,aAAa,CAACC,QAAD,EAAmBC,QAAnB,EAAmD;IACrE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG;EAED;AACF;AACA;AACA;AACA;;;EACSC,aAAa,CAACD,QAAD,EAAiC;IACnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG;EAED;AACF;AACA;AACA;AACA;AACA;;;EACSE,aAAa,CAChBT,IADgB,EAEhBU,IAFgB,EAGhBH,QAHgB,EAIZ;IACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSI,WAAW,CAACC,OAAD,EAAkBC,GAAlB,EAAgCN,QAAhC,EAAgE;IAChF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACG;EAED;AACF;AACA;AACA;AACA;;;EACSO,WAAW,CAACF,OAAD,EAAkBL,QAAlB,EAAuD;IACvE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG;EAED;AACF;AACA;AACA;;;EACSQ,YAAY,CAACf,IAAD,EAA8B;IAC/C;AACJ;AACA;AACA;AACA;EAEG;EAED;AACF;AACA;AACA;;;EACSgB,WAAW,CAAChB,IAAD,EAA4B;IAC5C;AACJ;AACA;AACA;AACA;EACG;;AAtKsE"}