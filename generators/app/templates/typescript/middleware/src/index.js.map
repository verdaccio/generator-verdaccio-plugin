{"version":3,"file":"index.js","names":["VerdaccioMiddlewarePlugin","constructor","config","options","foo","undefined","strict_ssl","logger","register_middlewares","app","auth","_storage"],"sources":["index.ts"],"sourcesContent":["import {Logger, IPluginMiddleware, IBasicAuth, IStorageManager, PluginOptions} from '@verdaccio/types';\nimport {Router, Request, Response, NextFunction, Application} from 'express';\n\nimport {CustomConfig} from '../types/index';\n\nexport default class VerdaccioMiddlewarePlugin implements IPluginMiddleware<CustomConfig> {\n  public logger: Logger;\n  public foo: string;\n  public constructor(config: CustomConfig, options: PluginOptions<CustomConfig>) {\n    this.foo = config.foo !== undefined ? config.strict_ssl : true;\n    this.logger = options.logger;\n  }\n\n  public register_middlewares(\n      app: Application,\n      auth: IBasicAuth<CustomConfig>,\n      /* eslint @typescript-eslint/no-unused-vars: off */\n      _storage: IStorageManager<CustomConfig>,\n  ): void {\n    /**\n     * This is just an example of implementation\n    // eslint new-cap:off\n      const router = Router();\n      router.post(\n        '/custom-endpoint',\n        (req: Request, res: Response & { report_error?: Function }, next: NextFunction): void => {\n          const encryptedString = auth.aesEncrypt(Buffer.from(this.foo, 'utf8'));\n          res.setHeader('X-Verdaccio-Token-Plugin', encryptedString.toString());\n          next();\n        }\n      );\n      app.use('/-/npm/something-new', router);\n    */\n  }\n}\n"],"mappings":";;;;;;;AAKe,MAAMA,yBAAN,CAA2E;EAGjFC,WAAW,CAACC,MAAD,EAAuBC,OAAvB,EAA6D;IAC7E,KAAKC,GAAL,GAAWF,MAAM,CAACE,GAAP,KAAeC,SAAf,GAA2BH,MAAM,CAACI,UAAlC,GAA+C,IAA1D;IACA,KAAKC,MAAL,GAAcJ,OAAO,CAACI,MAAtB;EACD;;EAEMC,oBAAoB,CACvBC,GADuB,EAEvBC,IAFuB;EAGvB;EACAC,QAJuB,EAKnB;IACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG;;AA5BuF"}